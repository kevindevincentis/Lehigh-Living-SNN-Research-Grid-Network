load_file("neuronTemp.hoc")

begintemplate grid_network
public cellArray, inputCells, outputs, inhibConns, syn, input

objectvar cellArray[1], syn, r, initW, inputCells, outputs, inputs, inputSyn[1]
double inhibConns[1]

proc init() {
    numNeurons = $1
    inhibPerc = $2
    inputSize = $3
    inputCols = (inputSize/int((numNeurons^0.5)))
    border = (numNeurons^0.5 - inputCols*2)/2

    mean = 0
    sigma = 650
    e_excite = 0 // For excitatory connections
    e_inhibit = -80 // For inhibitory connections
    pi = 3.1415926535897932384

    step = 1000.0/(numNeurons)^(0.5)
    h = numNeurons^0.5

    r = new Random()
    initW = new Random()
    syn = new List()

    objref cellArray[numNeurons], inputCells, outputs, inputSyn[inputSize + 10], inputs
    double inhibConns[inhibPerc*numNeurons + 1]
    inputCells = new List()
    outputs = new List()
    inputs = new List()


    // Create Neurons and place them equally spaced on a grid of size 1mm X 1mm
    Z = 0 // All neurons will be on the same XY plane
    d = 10
    for i = 0, numNeurons-1 {
        cellArray[i] = new procCell(inputSize)
        access cellArray[i].soma

        y = int(i/h)
        x = int(i%h)
        // Designate cell as input or output
        if (x > border && x < border + inputCols*2 && x%2 == 0 && inputCells.count() < inputSize) {
            inputCells.append(cellArray[i])
        } else {
            outputs.append(cellArray[i])
        }

        pt3dclear()
        Y = y*step
        X = x*step
        pt3dadd(X, Y, Z, d)
        pt3dadd(X, Y, Z + 20, d)
    }
    print inputCells.count()
    print outputs.count()

    // Designate inhibitory neurons
    r.discunif(0, numNeurons-1)
    for i = 0, numNeurons*inhibPerc-1 {
        good = 0
        while (!good){
            good = 1
            pick = r.repick()
            for j = 0, i {
                if (pick == inhibConns[j]) {
                    good = 0
                    break
                }
            }
        }
        inhibConns[i] = pick
    }

    r.uniform(0,1)
    initW.normal(0,0.0001)
    // Create connections based on guassian distribution wrt distance
    for i = 0, numNeurons-1 {
        curX = (i%h)*step
        curY = int(i/h)*step
        for j = 0, numNeurons-1 {
            if (i == j) {continue}
            // Calculated distance and probability of a connection
            destX = (j%h)*step
            destY = int(j/h)*step
            dist = ((curX-destX)^2 + (curY-destY)^2)^0.5
            normalizedDist = (dist - mean)/sigma
            prob = 1/(2*pi)^.5 * exp(-(normalizedDist/2))

            num = r.repick()
            // If num <= prob, this means we have a successful connection
            if (num <= prob) {
                w = initW.repick()
                while (w <= 0 || w > 0.01) {w = r.repick()}
                isInhibit = 0
                for k = 0, numNeurons*inhibPerc-1{
                    if (i == inhibConns[k]) {isInhibit = 1}
                }
                if (isInhibit) {e = e_inhibit}
                if (!isInhibit) {e = e_excite}
                cellArray[j].soma syn.append(new ExpSyn(0))
                syn.object(syn.count()-1).e = e
                cellArray[i].soma cellArray[j].nclist.append(new NetCon(&v(1), syn.object(syn.count()-1), -15, 5, w))
            }
        }
    }

    // Set up the input stimulators
    for i = 0, inputCells.count()-1 {
        inputCells.object(i).soma inputSyn[i] = new ExpSyn(0)
        inputSyn[i].e = e_excite
        inputs.append(new NetStim(1))
        inputs.object(i).noise = 0
        inputs.object(i).start = 5
        inputs.object(i).number = 1
        inputCells.object(i).nclist.append(new NetCon(inputs.object(i), inputSyn[i], -15, 1, 1))
    }


}

proc input() {local i
    for i = 0, inputSize-1{
        w = $&1[i]
        inputs.object(i).interval = (1.0)/(w)
        inputs.object(i).number = 1
        // Low frequency inputs do not stimulate neurons
        if (w <= 1.0/90) {inputs.object(i).number = 0}
    }
}
endtemplate grid_network
